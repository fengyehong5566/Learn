# 简述Etcd及其特点

    etcd 是CoreOS团队发起的开源项目，基于 Go 语言实现。是一个管理配置信息和服务发现（service discovery）的项目，它的目标是构建一个高可用的分布式键值（key-value）数据库。

    特点：

        简单：支持REST【API：http  + json 】

        安全：支持https

        快速：支持并发 1k/s 的写操作，读更快

        可靠：分布式结构，基于 Raft 的一致性算法

    使用场景：

        服务发现

        负载均衡

        消息发布与订阅

        分布式通知与协调

        分布式锁



# 简述HAproxy 及其特性

    HAProxy是可提供高可用性、负载均衡以及基于TCP和HTTP应用的代理，是免费、快速并且可靠的一种解决方案。适用于并发大的web站点。

    主要特性：

可靠性和稳定性非常好，可以与硬件级的F5负载均衡设备相媲美；

详细的健康状态检测，web接口中有关于对上游服务器的健康检测状态，并提供了一定的管理功能；

支持多达8种负载均衡算法，同时也支持会话保持；

支持虚机主机功能，从而实现web负载均衡更加灵活；

支持连接拒绝、全透明代理等独特的功能；

拥有强大的ACL支持，用于访问控制；

其独特的弹性二叉树数据结构，使数据结构的复杂性上升到了0(1)，即数据的查寻速度不会随着数据条目的增加而速度有所下降；

支持客户端的keepalive功能，减少客户端与haproxy的多次三次握手导致资源浪费，让多个请求在一个tcp连接中完成；

支持TCP加速，零复制功能，类似于mmap机制；

支持响应池（response buffering）；

支持RDP协议；

基于源的粘性，类似nginx的ip_hash功能，把来自同一客户端的请求在一定时间内始终调度到上游的同一服务器；

最高可以同时维护40000-50000个并发连接，单位时间内处理的最大请求数为20000个，最大处理能力可达10Git/s；

更好统计数据接口，其web接口显示后端集群中各个服务器的接收、发送、拒绝、错误等数据的统计信息；

基于流量的健康评估机制；

基于http认证；

日志分析器，可对日志进行分析。

    常用负载均衡算法：

        roundrobin: 轮询

        static-rr: 权重轮询

        leastconn: 最少连接

        source: 根据源ip地址， 类似nginx ip_hash

        ri: 根据请求的URI

        rl_param: 表示更加http请求头来锁定每次http请求

        rdp-cookie(name): 表示更具cookie(name) 来锁定并hash每次tcp请求



# 简述LVS的工作模式及其原理

    LVS 有三种负载均衡的模式是： VS/NAT（nat 模式）、VS/DR（路由模式）、VS/TUN（隧道模式）。

    NAT模式（VS-NAT）

    原理：首先负载均衡器接收到客户的请求数据包时，根据调度算法决定将请求发送给哪个后端的真实服务器（RS）。然后负载均衡器就把客户端发送的请求数据包的目标IP地址及端口改成后端真实服务器的IP地址（RIP）。真实服务器响应完请求后，查看默认路由，把响应后的数据包发送给负载均衡器，负载均衡器在接收到响应包后，把包的源地址改成虚拟地址（VIP）然后发送回给客户端。

    优点：集群中的服务器可以使用任何支持TCP/IP的操作系统，只要负载均衡器有一个合法的IP地址。

    缺点：扩展性有限，当服务器节点增长过多时，由于所有的请求和应答都需要经过负载均衡器，因此负载均衡器将成为整个系统的瓶颈。

    IP隧道模式（VS-TUN）

    原理：首先负载均衡器接收到客户的请求数据包时，根据调度算法决定将请求发送给哪个后端的真实服务器（RS）。然后负载均衡器就把客户端发送的请求报文封装一层IP隧道（T-IP）转发到真实服务器（RS）。真实服务器响应完请求后，查看默认路由，把响应后的数据包直接发送给客户端，不需要经过负载均衡器。

    优点：负载均衡器只负责将请求包分发给后端节点服务器，而RS将应答包直接发给用户。所以，减少了负载均衡器的大量数据流动，负载均衡器不再是系统的瓶颈，也能处理很巨大的请求量。

    缺点：隧道模式的RS节点需要合法IP，这种方式需要所有的服务器支持“IP Tunneling”。

    直接路由模式（VS-DR）

    原理：首先负载均衡器接收到客户的请求数据包时，根据调度算法决定将请求发送给哪个后端的真实服务器（RS）。然后负载均衡器就把客户端发送的请求数据包的目标MAC地址改成后端真实服务器的MAC地址（R-MAC）。真实服务器响应完请求后，查看默认路由，把响应后的数据包直接发送给客户端，不需要经过负载均衡器。

    优点：负载均衡器只负责将请求包分发给后端节点服务器，而RS将应答包直接发给用户。所以，减少了负载均衡器的大量数据流动，负载均衡器不再是系统的瓶颈，也能处理很巨大的请求量。

    缺点：需要负载均衡器与真实服务器RS都有一块网卡连接到同一物理网段上，必须在同一个局域网环境。












#简述负载均衡 四层和七层的区别

    四层负载均衡器也称为4层交换机，主要通过分析IP层及TCP/UDP的流量实现基于IP加端口的负载均衡，常见的有lvs 、F5等

    七层负载均衡器也称为7层交换机，位于应用层。根据报文内容，配合一定的负载均衡算法来 选择后端服务器，常见的有 HAProxy，nginx（高版本已经支持使用stream关键字）等




#简述 LVS、Nginx、HAProxy的区别

    区别：

LVS已集成在Linux操作系统，而HAProxy和Nginx属于第三方应用软件；

LVS是可实现4层的IP负载均衡技术，无法实现基于目录、URL的转发。而HAProxy和Nginx都可以实现4层和7层技术，HAProxy可提供TCP和HTTP应用的负载均衡综合解决方案；

LVS因为工作在ISO模型的第四层，其状态监测功能单一，而HAProxy在状监测方面功能更丰富、强大，可支持端口、URL、脚本等多种状态检测方式；

HAProxy功能强大，但整体性能低于4层模式的LVS负载均衡。

Nginx主要用于Web服务器或缓存服务器。



# 简述 Lvs、Nginx和 HAProxy各自的优缺点

    Nginx的优点：

        1、工作在网络的7层之上，可以针对http应用做一些分流的策略，比如针对域名、目录结构。Nginx正则规则比HAProxy更为强大和灵活。

        2、Nginx对网络稳定性的依赖非常小，理论上能ping通就就能进行负载功能，LVS对网络稳定性依赖比较大，稳定要求相对更高。

        3、Nginx安装和配置、测试比较简单、方便，有清晰的日志用于排查和管理，LVS的配置、测试就要花比较长的时间了。

        4、可以承担高负载压力且稳定，一般能支撑几万次的并发量，负载度比LVS相对小些。

        5、Nginx可以通过端口检测到服务器内部的故障，比如根据服务器处理网页返回的状态码、超时等等。

        6、Nginx不仅仅是一款优秀的负载均衡器/反向代理软件，它同时也是功能强大的Web应用服务器。

        7、Nginx作为Web反向加速缓存越来越成熟了，速度比传统的Squid服务器更快，很多场景下都将其作为反向代理加速器。

        8、Nginx作为静态网页和图片服务器，这方面的性能非常优秀，同时第三方模块也很多。

    Nginx的缺点：
        1、Nginx仅能支持http、https和Email协议，这样就在适用范围上面小些。

        2、对后端服务器的健康检查，只支持通过端口来检测，不支持通过url来检测。

        3、不支持Session的直接保持，需要通过ip_hash来解决。



    Lvs的优点：

        1、抗负载能力强、是工作在网络4层之上仅作分发之用，没有流量的产生。因此负载均衡软件里的性能最强的，对内存和cpu资源消耗比较低。

        2、LVS工作稳定，因为其本身抗负载能力很强，自身有完整的双机热备方案。

        3、无流量，LVS只分发请求，而流量并不从它本身出去，这点保证了均衡器IO的性能不会收到大流量的影响。

        4、应用范围较广，因为LVS工作在4层，所以它几乎可对所有应用做负载均衡，包括http、数据库等。

    Lvs的缺点：

        1、软件本身不支持正则表达式处理，不能做动静分离。相对来说，Nginx/HAProxy+Keepalived则具有明显的优势。

        2、如果是网站应用比较庞大的话，LVS/DR+Keepalived实施起来就比较复杂了。相对来说，Nginx/HAProxy+Keepalived就简单多了。



HAProxy的优点：

        1、HAProxy也是支持虚拟主机的。

        2、HAProxy的优点能够补充Nginx的一些缺点，比如支持Session的保持，Cookie的引导，同时支持通过获取指定的url来检测后端服务器的状态。

        3、HAProxy跟LVS类似，本身就只是一款负载均衡软件，单纯从效率上来讲HAProxy会比Nginx有更出色的负载均衡速度，在并发处理上也是优于Nginx的。

        4、HAProxy支持TCP协议的负载均衡转发。



# 简述代理服务器的概念及其作用？

    代理服务器是一个位于客户端和原始（资源）服务器之间的服务器，为了从原始服务器取得内容，客户端向代理服务器发送一个请求并指定目标原始服务器，然后代理服务器向原始服务器转交请求并将获得的内容返回给客户端。

    其主要作用有：

资源获取：代替客户端实现从原始服务器的资源获取；

加速访问：代理服务器可能离原始服务器更近，从而起到一定的加速作用；

缓存作用：代理服务器保存从原始服务器所获取的资源，从而实现客户端快速的获取；

隐藏真实地址：代理服务器代替客户端去获取原始服务器资源，从而隐藏客户端真实信息。


# 简述 keepalived及其原理

    Keepalived是基于VRRP(路由冗余协议)协议来实现的路由器高可用的方案，可以解决静态路由出现的单点故障问题。

    将多台路由器组成路由器组（Router Group），组中包括Master及Backup，在外部看来就像一台路由器，拥有一个VIP。Master会发送组播消息，当Backup在指定的时间收不到vrrp包就会认为master宕掉，然后通过VRRP协议再次竞选新的路由器当Master，从而保证路由器的高可用。

    

    主要模块及其作用：

        keepalived服务主要包含三个模块：core、check和vrrp

            core模块: 是keepalived的核心，负责主进程的启动、维护以及配置文件的加载和解析。

            vrrp模块: 实现vrrp协议

            check模块: 负责健康检查，常用方式有端口和url检查



    keepalived是如何工作的：

        1、从网络层看：keepalived定期ping目标服务器，如果此IP没有激活，keepalived便报告这台服务器失效，进行移除

        2、从传输层看：看web服务器的端口是否正常

        3、从应用层看：根据用户设置的检测脚本，检测服务是否正常。



​# 简述高可用集群通过哪两个维度衡量高可用性？

    ​RTO（Recovery Time Objective）：RTO指服务恢复的时间，最佳的情况是 0，即服务立即恢复；最坏是无穷大，即服务永远无法恢复；

    ​RPO（Recovery Point Objective）：RPO 指指当灾难发生时允许丢失的数据量，0 意味着使用同步的数据，大于 0 意味着有数据丢失，如“RPO=1 d”指恢复时使用一天前的数据，那么一天之内的数据就丢失了。因此，恢复的最佳情况是 RTO = RPO = 0，几乎无法实现。



# 分布式系统需要满足的三个条件​：

    ​Consistency（一致性）​：所有节点在同一时间具有相同的数据

    ​Availability（可用性）：保证每个请求不管成功或失败都有响应

    ​Partition tolerance（分区容错性）：系统中任曦信息的丢失或失败不影响系统的继续运行

    ​​注：CAP理论的核心​是：一个分布式系统不可能 同时 很好的满足一上三个需求，最多同时较好的满足两个需求
