@简述Keepalived及其工作原理？
  Keepalived 是一个基于VRRP协议来实现的LVS服务高可用方案，可以解决静态路由出现的单点故障问题。
  在一个LVS服务集群中通常有主服务器（MASTER）和备份服务器（BACKUP）两种角色的服务器，但是对外表现为一个虚拟IP，主服务器会发送VRRP通  \
   告信息给备份服务器，当备份服务器收不到VRRP消息的时候，即主服务器异常的时候，备份服务器就会接管虚拟IP，继续提供服务，从而保证了高可用性。

@简述Keepalived体系主要模块及其作用？
  keepalived体系架构中主要有三个模块，分别是core、check和vrrp。
  core模块为keepalived的核心，负责主进程的启动、维护及全局配置文件的加载和解析。
  vrrp模块是来实现VRRP协议的。
  check负责健康检查，常见的方式有端口检查及URL检查。

@简述Keepalived如何通过健康检查来保证高可用？
  Keepalived工作在TCP/IP模型的第三、四和五层，即网络层、传输层和应用层。
  网络层，Keepalived采用ICMP协议向服务器集群中的每个节点发送一个ICMP的数据包，如果某个节点没有返回响应数据包，则认为此节点发生了故障，Keepalived将报   \
   告次节点失效，并从服务器集群中剔除故障节点。利用 Nginx+Keepalived 实现高可用技术
  传输层，Keepalived利用TCP的端口连接和扫描技术来判断集群节点是否正常。如常见的web服务默认端口80，ssh默认端口22等。Keepalived一旦在传输层探测到相应端口  \
   没用响应数据返回，则认为此端口发生异常，从而将此端口对应的节点从服务器集群中剔除。
  应用层，可以运行FTP、telnet、smtp、dns等各种不同类型的高层协议，Keepalived的运行方式也更加全面化和复杂化，用户可以通过自定义Keepalived的工作方式，来设定  \
   监测各种程序或服务是否正常，若监测结果与设定的正常结果不一致，将此服务对应的节点从服务器集群中剔除。
  Keepalived通过完整的健康检查机制，保证集群中的所有节点均有效从而实现高可用。

@@负载均衡
@简述LVS的概念及其作用？
  LVS是linux virtual server的简写linux虚拟服务器，是一个虚拟的服务器集群系统，可以在unix/linux平台下实现负载均衡集群功能。超详细！一文带你了解 LVS 负载均衡集群！

  主要作用是：通过LVS提供的负载均衡技术实现一个高性能、高可用的服务器群集。因此LVS主要可以实现：
    把单台计算机无法承受的大规模的并发访问或数据流量分担到多台节点设备上分别处理，减少用户等待响应的时间，提升用户体验。
    单个重负载的运算分担到多台节点设备上做并行处理，每个节点设备处理结束后，将结果汇总，返回给用户，系统处理能力得到大幅度提高。
    7*24小时的服务保证，任意一个或多个设备节点设备宕机，不能影响到业务。在负载均衡集群中，所有计算机节点都应该提供相同的服务，集群负载均衡获取所有对该服务的如站请求。

@简述LVS的工作模式及其工作过程？
  LVS 有三种负载均衡的模式：
    VS/NAT（nat 模式）
    VS/DR（路由模式）
    VS/TUN（隧道模式）

    NAT模式（VS-NAT）
      原理：首先负载均衡器接收到客户的请求数据包时，根据调度算法决定将请求发送给哪个后端的真实服务器（RS）。然后负载均衡器就把客户端发送的  \
            请求数据包的目标IP地址及端口改成后端真实服务器的IP地址（RIP）。真实服务器响应完请求后，查看默认路由，把响应后的数据包发送给负载均衡器，负载  \
            均衡器在接收到响应包后，把包的源地址改成虚拟地址（VIP）然后发送回给客户端。
      优点：集群中的服务器可以使用任何支持TCP/IP的操作系统，只要负载均衡器有一个合法的IP地址。
      缺点：扩展性有限，当服务器节点增长过多时，由于所有的请求和应答都需要经过负载均衡器，因此负载均衡器将成为整个系统的瓶颈。

    IP隧道模式（VS-TUN）
      原理：首先负载均衡器接收到客户的请求数据包时，根据调度算法决定将请求发送给哪个后端的真实服务器（RS）。然后负载均衡器就把客户端发送的请求  \
            报文封装一层IP隧道（T-IP）转发到真实服务器（RS）。真实服务器响应完请求后，查看默认路由，把响应后的数据包直接发送给客户端，不需要经过负载均衡器。
      优点：负载均衡器只负责将请求包分发给后端节点服务器，而RS将应答包直接发给用户。所以，减少了负载均衡器的大量数据流动，负载均衡器不再是系统的瓶颈，也能处理很巨大的请求量。
      缺点：隧道模式的RS节点需要合法IP，这种方式需要所有的服务器支持“IP Tunneling”。

    直接路由模式（VS-DR）
      原理：首先负载均衡器接收到客户的请求数据包时，根据调度算法决定将请求发送给哪个后端的真实服务器（RS）。然后负载均衡器就把客户端发送的请求数据包的  \
            目标MAC地址改成后端真实服务器的MAC地址（R-MAC）。真实服务器响应完请求后，查看默认路由，把响应后的数据包直接发送给客户端，不需要经过负载均衡器。
      优点：负载均衡器只负责将请求包分发给后端节点服务器，而RS将应答包直接发给用户。所以，减少了负载均衡器的大量数据流动，负载均衡器不再是系统的瓶颈，也能处理很巨大的请求量。
      缺点：需要负载均衡器与真实服务器RS都有一块网卡连接到同一物理网段上，必须在同一个局域网环境。

@简述LVS调度器常见算法（均衡策略）？
  LVS调度器用的调度方法基本分为两类：
    固定调度算法：【rr，wrr，dh，sh】
      rr：轮询算法，将请求依次分配给不同的RealServer节点，即RS节点中均摊分配。适合于RealServer所有节点处理性能接近的情况。
      wrr：加权轮训调度，依据不同RealServer的权值分配任务。权值较高的RS将优先获得任务，并且分配到的连接数将比权值低的RealServer更多。相同权值的RS得到相同数目的连接数。
      dh：目的地址哈希调度（destination hashing）以目的地址为关键字查找一个静态hash表来获得所需RealServer。
      sh：源地址哈希调度（source hashing）以源地址为关键字查找一个静态hash表来获得需要的RealServer。

    动态调度算法：wlc，lc，lblc，lblcr
      wlc：加权最小连接数调度，假设各台RealServer的权值依次为Wi，当前tcp连接数依次为Ti，依次去Ti/Wi为最小的RealServer作为下一个分配的RealServer。
      lc：最小连接数调度（least-connection），IPVS表存储了所有活动的连接。LB会比较将连接请求发送到当前连接最少的RealServer。
      lblc：基于地址的最小连接数调度（locality-based least-connection）：将来自同一个目的地址的请求分配给同一台RS，此时这台服务器是尚未满负荷的。否则就将这个   \
             请求分配给连接数最小的RealServer，并以它作为下一次分配的首先考虑。

14、简述LVS、Nginx、HAProxy各自优缺点？
  Nginx的优点：
    工作在网络的7层之上，可以针对http应用做一些分流的策略，比如针对域名、目录结构。Nginx正则规则比HAProxy更为强大和灵活。
    Nginx对网络稳定性的依赖非常小，理论上能ping通就就能进行负载功能，LVS对网络稳定性依赖比较大，稳定要求相对更高。
    Nginx安装和配置、测试比较简单、方便，有清晰的日志用于排查和管理，LVS的配置、测试就要花比较长的时间了。
    可以承担高负载压力且稳定，一般能支撑几万次的并发量，负载度比LVS相对小些。
    Nginx可以通过端口检测到服务器内部的故障，比如根据服务器处理网页返回的状态码、超时等等。
    Nginx不仅仅是一款优秀的负载均衡器/反向代理软件，它同时也是功能强大的Web应用服务器。
    Nginx作为Web反向加速缓存越来越成熟了，速度比传统的Squid服务器更快，很多场景下都将其作为反向代理加速器。
    Nginx作为静态网页和图片服务器，这方面的性能非常优秀，同时第三方模块也很多。

  Nginx的缺点：
    Nginx仅能支持http、https和Email协议，这样就在适用范围上面小些。
    对后端服务器的健康检查，只支持通过端口来检测，不支持通过url来检测。
    不支持Session的直接保持，需要通过ip_hash来解决。

  LVS的优点：
    抗负载能力强、是工作在网络4层之上仅作分发之用，没有流量的产生。因此负载均衡软件里的性能最强的，对内存和cpu资源消耗比较低。
    LVS工作稳定，因为其本身抗负载能力很强，自身有完整的双机热备方案。
    无流量，LVS只分发请求，而流量并不从它本身出去，这点保证了均衡器IO的性能不会收到大流量的影响。
    应用范围较广，因为LVS工作在4层，所以它几乎可对所有应用做负载均衡，包括http、数据库等。

  LVS的缺点：
    软件本身不支持正则表达式处理，不能做动静分离。相对来说，Nginx/HAProxy+Keepalived则具有明显的优势。
    如果是网站应用比较庞大的话，LVS/DR+Keepalived实施起来就比较复杂了。相对来说，Nginx/HAProxy+Keepalived就简单多了。

  HAProxy的优点：
    HAProxy也是支持虚拟主机的。
    HAProxy的优点能够补充Nginx的一些缺点，比如支持Session的保持，Cookie的引导，同时支持通过获取指定的url来检测后端服务器的状态。
    HAProxy跟LVS类似，本身就只是一款负载均衡软件，单纯从效率上来讲HAProxy会比Nginx有更出色的负载均衡速度，在并发处理上也是优于Nginx的。
    HAProxy支持TCP协议的负载均衡转发。
















