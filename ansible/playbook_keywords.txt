最基本的playbook脚本：【三部分】
	1、在什么机器上以什么身份执行
		hosts
		users
		...
	2、执行的任务是都有什么
		tasks
	3、善后的任务都有什么
		handlers

hosts：为主机IP、主机组名、all
remote_user：用哪个用户执行
become：切换成其它用户身份执行，值为yes/no
become_method：与became一起用，值可以为‘sudo’/’su’/’pbrun’/’pfexec’/’doas’
become_user：与bacome一起用，可以是root或者其它用户名
vars：定义变量
	{{}}：playbook中调用变量
"register: result"  将task的执行结果注册为一个变量result
	命令行中只用--extra-vars 传递变量
tasks：playbook的核心，定义顺序执行的action（每个action调用一个ansible module）
	action语法：
		module: module_parameter=module_value

handlers：是playbook的event，默认不执行，在action里出发才会执行。多次触发执行一次
	注：
		handlers定义的顺序是1>2>3，notify的顺序是3>2>1，实际执行顺序：1>2>3.
notify：调用handlers

include：重用单个静态的Playbook脚本
roles：重用一组playbook脚本，稍微复杂
	  roles:
		- role: myrole
		  param: 'Call some_role for the 1st time'
		roles的目录结构：
			main.yml
			roles/
				role_name/
					tasks/
					handlers/
					defaults/
					vars/
					templates/
					meta/
		roles各目录功能：
			1、如果 roles/x/tasks/main.yml 存在, 其中列出的 tasks 将被添加到 play 中，所以这个文件也可以视作role的入口文件，想看role做了什么操作，可以从此文件看起。
			2、如果 roles/x/handlers/main.yml 存在, 其中列出的 handlers 将被添加到 play 中
			3、如果 roles/x/vars/main.yml 存在, 其中列出的 variables 将被添加到 play 中
			4、如果 roles/x/meta/main.yml 存在, 其中列出的 “角色依赖” 将被添加到 roles 列表中
			5、roles/x/tasks/main.yml中所有tasks，可以引用 roles/x/{files,templates,tasks}中的文件，不需要指明文件的路径。
			
tags：设置tasks标签，实现执行部分task		    

[group_name:children]：group_name下包含其他分组
[group_name:vars]：在group_name中定义变量









install  ansible: [centos]
	$ sudo yum install epel-release 
	$ sudo yum install ansible -y
	
anbile配置文件的优先级
ansible的默认配置文件是/etc/ansible/ansible.cfg。其实ansible会按照下面的顺序查找配置文件，并使用第一个发现的配置文件。
* ANSIBLE_CONFIG (an environment variable)
* ansible.cfg (in the current directory)
* .ansible.cfg (in the home directory)
* /etc/ansible/ansible.cfg
	
	
	
	
	
	
	
	