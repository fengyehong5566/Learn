创建一个Jenkinsfile被检入源代码控制，提供了一些直接的好处：
    Pipeline上的代码审查/迭代
    Pipeline的审计跟踪
    Pipeline的唯一真实来源，可以由项目的多个成员查看和编辑。

Pipeline支持两种语法：
	Declarative（在Pipeline 2.5中引入）和Scripted Pipeline。
	两者都支持建立连续输送Pipeline。两者都可以用于在Web UI或者a中定义一个流水线Jenkinsfile，尽管通常被认为是Jenkinsfile将文件创建并检查到源代码控制库中的最佳做法。

声明式流水线基础
在声明式流水线语法中, pipeline 块定义了整个流水线中完成的所有的工作。
Jenkinsfile (Declarative Pipeline)
pipeline {
    agent any    #在任何可用的代理上，执行流水线或它的任何阶段。
    stages {
        stage('Build') {   #定义 "Build" 阶段。
            steps {
                //         #执行与 "Build" 阶段相关的步骤。
            }
        }
        stage('Test') {    #定义"Test"阶段
            steps {
                //         #执行与"Test" 阶段相关的步骤。
            }
        }
        stage('Deploy') {  #定义 "Deploy" 阶段。
            steps {
                //         #执行与 "Deploy" 阶段相关的步骤。
            }
        }
    }
}


脚本化流水线基础
在脚本化流水线语法中, 一个或多个 node 块在整个流水线中执行核心工作。 虽然这不是脚本化流水线语法的强制性要求, 但它限制了你的流水线的在`node`块内的工作做两件事:
    1、通过在Jenkins队列中添加一个项来调度块中包含的步骤。 节点上的执行器一空闲, 该步骤就会运行。
    2、创建一个工作区(特定为特定流水间建立的目录)，其中工作可以在从源代码控制检出的文件上完成。
Jenkinsfile (Scripted Pipeline)
node {                       #在任何可用的代理上，执行流水线或它的任何阶段
    stage('Build') {         #定义"Build"阶段。stage块 在脚本化流水线语法中是可选的。然而在脚本化流水线中实现 stage块，可以清楚的显示Jenkins UI中的每个stage的任务子集。
        //                   #执行与 "Build" 阶段相关的步骤。
    }
    stage('Test') {          #定义"Test"阶段
        //                   #执行与"Test" 阶段相关的步骤。
    }
    stage('Deploy') {        #定义 "Deploy" 阶段。
        //                   #执行与 "Deploy" 阶段相关的步骤。
    }
}







