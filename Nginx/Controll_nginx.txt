nginx可以通过信号来控制.
nginx主进程支持信号:
	TERM,INT	快速关闭
	QUIT		正常关机
	HUP			改变配置，跟上一个变化的时区(只适用于FreeBSD和Linux)，以新的配置文件重新打开新的worker进程，并正常的关闭old worker进程
	USR1		重新打开日志文件
	USR2		更新执行文件
	WINCH		正常关闭worker进程

nginx worker进程支持信号：
	TERM,INT    快速关闭
    QUIT        正常关机
    USR1        重新打开日志文件
    WINCH       异常终止调试(需要开启debug_points)



注：
	debug_points：
		Syntax：debug_points abort |stop                    abort:中止
		Context：main
		该指令用于调试

	
												Changing Configuration【改变配置】
	为了重新加载nginx配置文件，发送HUP信号给master进程，master进程首先检查配置文件的语法是否有效，然后试图应用新的配置文件，即打开日志文件和新的监听端口。如果失败，将回滚并继续使用旧的配置文件；如果成功，打开一个新的worker进程并发送信息给旧的worker进程，请求他们正常的关闭。旧worker进程关闭监听端口并继续服务客户端，直到所有的客户端服务完毕，才完成关闭。

	

												Rotating  Log_files【轮转日志】
	为了旋转日志文件，需要首先重命名。 之后，USR1信号应发送到主进程。 然后，主进程将重新打开所有当前打开的日志文件，并将其分配给正在运行的工作进程的非特权用户作为所有者。 成功重新打开后，主程序关闭所有打开的文件，并将消息发送给工作进程，要求他们重新打开文件。 工作进程也会打开新文件并立即关闭旧文件。 因此，旧文件几乎立即可用于后处理，如压缩。


												Upgrading Executable on the Fly 【动态更新执行文件】
	为了更新服务的执行文件，新的执行文件应该替换旧的执行文件。之后，发送USR2信号给master进程。master进程首先重命名它的PID文件，以“.oldbin”为后缀，如：/usr/local/nginx/logs/nginx.pid.oldbin。然后启动新的执行文件，再依次启动worker进程。

	注意，旧master进程不会关闭其监听套接字，如果需要它可以再次管理它的工作进程，如果由于某些原因，新的可执行文件工作不可接受，可以执行以下操作：
		1、发送HUP信号给旧master进程，旧master进程将打开新的worker进程，但不重新读取配置文件。然后新的进程[即旧的执行文件打开的]就可以通过发送QUIT信号给新的master进程[新的执行文件打开的]使之正常关闭
		2、发送TERM信号给新master进程[新的执行文件打开的]。它将发送信息给它的worker进程并要求worker进程立即关闭，且它们几乎立即全部退出。(如果新master进程由于某种原因不能退出，则应该发送KILL信号给它们以强制它们退出)当新的主进程退出时，旧的主进程将自动启动新的工作进程。

	如果新的master退出[新的执行文件打开的],旧master进程将会丢弃以".oldbin"为后缀的文件pid文件
	如果升级成功，那么旧的主进程应该发送QUIT信号，只有新进程将停留。











