																GIT Learn

安装Git：
    #redhat
        yum -y install git
    #windows
        msysgit.exe

创建库：
    [zhy@localhost ~]$ mkdir  git
    [zhy@localhost ~]$ cd git
    [zhy@localhost ~]$git init
    [zhy@localhost git]$ pwd
    /home/zhy/git
    [zhy@localhost git]$ ls -al
    总用量 24
    drwxrwxr-x. 3 zhy zhy  4096 8月  31 09:32 .
    drwx------. 4 zhy zhy  4096 8月  31 00:15 ..
    drwxrwxr-x. 7 zhy zhy  4096 8月  31 00:15 .git

使用：
	在工作区创建文件
		[zhy@localhost git]$ echo test > readme.txt	
	添加文件到暂存区：
		[zhy@localhost git]$ git  add  readme.txt
	把文件从暂存区提交到仓库：
		[zhy@localhost git]$ git commit  -m  “This is a test file.”
			-m：添加本次提交的说明
	查看历史记录：
		[zhy@localhost git]$ git log 
		[zhy@localhost git]$ git log  --pretty=oneline   [简化版]
	版本回退：
		[zhy@localhost git]$ git  reset --hard HEAD^    [回退到上一版本]
		[zhy@localhost git]$ git  reset --hard 版本号【前几位即可】
		[zhy@localhost git]$ git  reset --hard HEAD^^   [回退到上上版本]
		[zhy@localhost git]$ git  reset --hard HEAD~100  [往上回退100个版本]
		
	查找命令历史：
		[zhy@localhost git]$ git reflog
		
	查看目前状态：
		[zhy@localhost git]$ git status
		
	撤销修改：
		从工作区撤销：
			[zhy@localhost git]$ git  checkout -- file
				1、修改后但未添加到暂存区，撤销到和版本库一模一样；
				2、添加到暂存区后，又做修改，撤销到添加到暂存区后的状态
			即：就是让这个文件回到最近一次git commit 或git add时的状态
		”git checkout -- file“命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。
		
		从暂存区撤销：
			[zhy@localhost git]$ git  reset  HEAD file
				把暂存区的修改撤销掉（unstage），重新放回工作区
			
		从仓库撤销：
			参考“版本回退”章节
		
	删除文件：
		工作区：
			[zhy@localhost git]$  rm  test.txt
		
		删除库中文件：
			[zhy@localhost git]$ git  rm test.txt
			[zhy@localhost git]$ git commit -m "remove test.txt"
			
		删错文件：[版本库中还有]
			[zhy@localhost git]$ git checkout  -- test.txt
				用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”
		
	添加远程仓库：
		首先GitHub创建一个仓库
			git  remote add origin  https://github.com/accountname/learngit.git
				注：1、把accoutname换成自己的账号名字；
					2、添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。
	
	把本地库的内容推送到远程：
		第一次推送：
			[zhy@localhost git]$ git push -u origin master
				注：
					1、把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程
					2、第一次推送master分支时，加上-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master，在以后的推送或者拉取时就可以简化命令。
		第一次之后：
			[zhy@localhost git]$ git push origin master
		
	克隆远程库到本地：
		[zhy@localhost git]$ git clone https://github.com/accountname/learngit.git
		
	注：GitHub给出的地址不止一个，还可以用https://github.com/michaelliao/gitskills.git这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
		

分支管理：		
	创建分支：
		创建分支：
			[zhy@localhost git]$ git branch <name>
			
		创建分支并切换：		
			[zhy@localhost git]$ git checkout -b dev
				-b：表示创建并切换分支，dev是新的分区名
		
		查看分支：
			[zhy@localhost git]$ git branch [dev]
				注：git branch：显示所有分支，当前分支前面标有“*”号
		
		切换分支：
			[zhy@localhost git]$ git checkout master
		
		合并dev分支到master分支
			[zhy@localhost git]$ git merge dev
				注：1、git merge：把指定分支合并到当前分支
					2、合并模式：fast-forward【快进模式】
		删除分支：
			[zhy@localhost git]$ git branch -d dev
		
		
	解决冲突：
		查看分支合并情况：
			[zhy@localhost git]$ git log --pretty=oneline --abbrev-commit
		
	分支管理策略：
		一般git合并默认使用“Fast forward”模式，这种模式下，删除分支后，会丢掉分支信息。
		禁用“Fast forward”模式，Git就会在merge时生成一个新的commit，且可以在分支历史上查看分支信息
	
		--no-ff：禁用“Fast forward”模式
		[zhy@localhost git]$ git merge --no-ff -m "merge with no-ff" dev
		[zhy@localhost git]$ git log --graph --pretty=oneline --abbrev-commit
		
	分支策略：
		在实际开发中，我们应该按照几个基本原则进行分支管理：
		首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
		
	bug分支：
		正在dev分支工作，还未完成，但现在有个紧急bug需要解决，怎么办？
		Git提供了stash功能，可以把当前工作现场储藏起来，等以后恢复现场后继续工作
		储藏现场：
			[zhy@localhost git]$ git  stash
		查看现场：
			[zhy@localhost git]$ git  stash list
			
		恢复现场：
			法一：【恢复后不删除stash内容】
						[zhy@localhost git]$  git statsh apply
					删除stash的内容
						[zhy@localhost git]$  git stash drop
			法二：【恢复后删除stash内容】
				[zhy@localhost git]$ git stash pop
		可以多次stash，恢复的时候：
			[zhy@localhost git]$ git stash list
			[zhy@localhost git]$ git stash apply stash@{0}
		
		新建分支，commit后，未合并且需要删除：
			[zhy@localhost git]$ git branch -D dev
	
	多人协作：
		查看远程库信息：
			[zhy@localhost git]$ git remote
		or
			[zhy@localhost git]$ git remote -v
			
		推送分支：
			git push origin master
				推送分支：把该分支上的所有本地提交推送到远程库。推送是，要指定本地分支，
				如：git push origin dev
		注：并不是一定要把本地所有分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？
				master分支是主分支，因此要时刻与远程同步；
				dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
				bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
				feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
				总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！		
		
		抓取分支：
			[zhy@localhost git]$ git checkout -b dev origin/dev
			
		你和你的同事同时对readme.txt文件进行了修改，发生冲突：
			把最新的提交从origin/dev抓下来：
				[zhy@localhost git]$ git pull    
			如果失败：
				[zhy@localhost git]$ git branch --set-upstream dev  origin/dev
			再次pull。
			
	标签管理：
		创建标签：【默认tag打在最新提交的commit上】
			先切换到需要打标签的分支：
				[zhy@localhost git]$ git branch 
			再创建标签：
				[zhy@localhost git]$ git tag v1.0
			查看标签：
				[zhy@localhost git]$ git tag
		
		给历史commit打标签：
			[zhy@localhost git]$ git log --pretty=oneline  --abbrev-commit
			[zhy@localhost git]$ git tag v0.9  commitID
		
		查看标签信息：
			[zhy@localhost git]$ git show <tagname>
			
		创建带有说明的标签：【-a：指定标签名；-m：指定说明文字】
			[zhy@localhost git]$ git  tag -a v0.1  -m "versiong 0.1 released"   commitID
		
		用私钥签名一个标签：【-s】
			[zhy@localhost git]$ git tag -s v0.2 -m “signed version 0.2 released”  commitID
			注：1、签名采用PGP签名，必须首先安装gpg（GnuPG）,如果没有找到gpg，或者没有gpg秘钥对，就会报错
				2、用PGP签名的标签是不可伪造的，因为可以验证PGP签名。
		
	操作标签：
		删除标签：
			[zhy@localhost git]$ git tag -d  v0.1
			注：因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除
		
		推送标签某个到远程库：
			[zhy@localhost git]$ git push origin v1.0
			
		推送本地所有标签到远程库：
			[zhy@localhost git]$ git push origin --tags
			
		删除远程库的标签：
			先删除本地
				[zhy@localhost git]$ git tag -d v0.9     
			从远程删除，删除命令是push
				[zhy@localhost git]$ git push origin :refs/tags/v0.9
		
	远程库操作：
		查看远程库信息：
			[zhy@localhost git]$ git remote  -v 
		删除远程库：
			[zhy@localhost git]$ git remote rm origin
		
自定义GIT：
	让Git显示颜色：
		[zhy@localhost git]$ git config --global colour.ui  true
		
	忽略特殊文件：
		在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件
		所有配置文件可以直接在线浏览：https://github.com/github/gitignore
		
		忽略文件的原则是：
			1、忽略操作系统自动生成的文件，比如缩略图等；
			2、忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
			3、忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。
		
		强制添加一个文件到GIT：
			[zhy@localhost git]$ git add -f filename
			
		检查.gitignore文件语法
			[zhy@localhost git]$ git check-ignore -v filename
		
		注：.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！
		
	设置别名：
		使st表示status
			[zhy@localhost git]$ git config --global alias.st status
			[zhy@localhost git]$ git st 
		
		--global：全局参数，这台电脑的说有git仓库都有用
			注：配置git时，加上“--global”是针对当前用户起作用，不加只针对当前仓库起作用
		
	配置文件：
		每个仓库的Git配置文件都放在.git/config文件中：
		配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。
			
		
创建GIT私有仓库：
	1、安装git
		yum -y insall git
	
	2、创建git用户
		useradd  git
	
	3、创建证书登录
		收集所有需要登录的用户的公钥，导入到/home/git/.ssh/authorized_keys
		
	4、初始化Git仓库
		选定一个目录作为git仓库，假定是/srv/sample.git，在/srv目录下输入命令：
			git init --base sample.git
		注：服务器行的仓库通常以.git结尾
		然后修改owner为git
			chown  -R git.git sample.git
		
	5、禁用shell登录：
		安全考虑，第二遍创建的git用户不允许shell，可以编辑/etc/passwd文件，修改类似如下：
			git:x:1001:1001:,,,:/home/git:/bin/bash
		改成：
			git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
			注：git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出
		
	6、克隆远程仓库：
		git clone git@server:/srv/sample.git
		
	管理公钥：
		如果团队很大，可以使用gitosis管理公钥。
		
	管理权限：
		git本就是开源的，不支持权限控制，可以使用gitolite工具
		
		